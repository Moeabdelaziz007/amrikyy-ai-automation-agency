name: Security Scan & Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level=moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: test --severity-threshold=high
        
    - name: Run ESLint security rules
      run: |
        cd frontend
        npx eslint . --ext .ts,.tsx --config .eslintrc.security.json
        
    - name: Run TypeScript security check
      run: |
        cd frontend
        npx tsc --noEmit --strict
        
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Check for outdated dependencies
      run: |
        cd frontend
        npm outdated --depth=0
        
    - name: Check for unused dependencies
      run: |
        cd frontend
        npx depcheck
        
    - name: Check for duplicate dependencies
      run: |
        cd frontend
        npx npm-check-duplicates

  owasp-zap-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build application
      run: |
        cd frontend
        npm run build
        
    - name: Start application
      run: |
        cd frontend
        npm start &
        sleep 30
        
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Upload ZAP results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-results
        path: zap-results/

  security-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Install test dependencies
      run: |
        cd frontend
        npm install --save-dev jest @types/jest ts-jest
        
    - name: Run security tests
      run: |
        cd frontend
        npm test -- tests/security/
        
    - name: Run token revocation tests
      run: |
        cd frontend
        npm run test:security:revocation
        
    - name: Run 2FA tests
      run: |
        cd frontend
        npm run test:security:2fa
        
    - name: Run audit logging tests
      run: |
        cd frontend
        npm run test:security:audit

  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t axon-security-test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'axon-security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check GDPR compliance
      run: |
        echo "Checking GDPR compliance..."
        # Check for data collection points
        grep -r "personal.*data" frontend/src/ || true
        grep -r "email.*collection" frontend/src/ || true
        
    - name: Check SOX compliance
      run: |
        echo "Checking SOX compliance..."
        # Check for audit logging
        grep -r "audit.*log" frontend/src/ || true
        grep -r "financial.*data" frontend/src/ || true
        
    - name: Check HIPAA compliance
      run: |
        echo "Checking HIPAA compliance..."
        # Check for health data handling
        grep -r "health.*data" frontend/src/ || true
        grep -r "medical.*record" frontend/src/ || true

  security-report:
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, owasp-zap-scan, security-tests, docker-security, compliance-check]
    if: always()
    
    steps:
    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> security-report.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
        echo "- OWASP ZAP Scan: ${{ needs.owasp-zap-scan.result }}" >> security-report.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> security-report.md
        echo "- Docker Security: ${{ needs.docker-security.result }}" >> security-report.md
        echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });